#+TITLE: NixOSEncryptedLiveCD
* Prerequisites and installation

  This document assumes that you have successfully installed ~nix-duplicity-backup~.
  Add the following to your ~duplicity-backup-config.nix~:
#+BEGIN_src nix
  {
    # Add default files for a system backup
    imports = [ <nix-duplicity-backup/duplicity-system.nix> ];

    services.duplicity-system.destination = s3://s3.REGION.amazonaws.com/BUCKET/system;
  }
#+END_src

  Modify your ~configuration.nix~ to contain the following:
#+BEGIN_src nix
  {
    imports = [
      # Add create-image.sh to PATH
      <NixOSEncryptedLiveCD/module.nix>
    ] ++ lib.optional (builtins.pathExists ./system-specific.nix) ./system-specific.nix;
  }
#+END_src

  The most probable configuration to add to ~system-specific.nix~ are:
  - ~boot~
  - ~networking.defaultgateway~
  - ~networking.dhcpcd.enable = false;~
  - ~networking.interfaces~
  - ~services.xserver.videodrivers~

  However, keep the following configuration in your ~configuration.nix~:
  - ~boot.supportedFilesystems~

  On my desktop, the ~system-specific.nix~ is:
#+BEGIN_src nix
  {
    boot = {
      loader = {
        systemd-boot.enable = true;
        timeout = 2;
        efi.canTouchEfiVariables = true;
      };
    };

    services.xserver.videoDrivers = [ "intel" "nvidia" ];

    networking = {
      dhcpcd.enable = false;
      defaultGateway = "192.168.2.1";

      interfaces.enp3s0.ipv4.addresses = [{
        address = "192.168.2.101";
        prefixLength = 24;
      }];
    };
  }
#+END_src

  Rebuild and upload your first system archive:
#+BEGIN_src bash
  nixos-rebuild switch
  systemctl start duplicity-system
#+END_src

* Creating a backup image

  In this section, we will be creating an image and testing it under QEMU.
  First, create a Bash environment containing ~nix-serve~ and ~qemu_kvm~:
#+BEGIN_src bash
  nix run nixpkgs.nix-serve nixpkgs.qemu_kvm
#+END_src
  Under the nix environment, run the following:
#+BEGIN_src bash
  nix-serve &
  NIX_SERVE_PID=$!
  truncate -s 8G testdisk
  sudo create-image.sh --debug _gateway:5000
  sudo qemu-kvm -m 2048 -smp 2 -hda ./result -hdb ./testdisk
  kill $!
#+END_src

  If backups were successful, you can directly flash the file, or
  create a new file with debug disabled to an external drive:
#+BEGIN_src bash
  sudo create-image.sh
  sudo dd if=result of=/dev/sdX status=progress
#+END_src
